{"version":3,"sources":["img/profile_photo.png","components/profile/profile.tsx","components/leftComponent.tsx","components/rightComponent.tsx","components/mainComponent.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProfileComponent","className","src","ProfilePhoto","href","onClick","window","open","LeftComponent","RightComponent","MainComponent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,2C,oMC+D5BC,MA3Df,WAUE,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKC,IAAcF,UAAU,uBAEpC,yBAAKA,UAAU,gBACb,4CACA,8CAEF,yBAAKA,UAAU,wBACb,uBACEA,UAAU,eACVG,KAAK,0CAEL,uBAAGH,UAAU,oBAEf,uBACEA,UAAU,eACVG,KAAK,sDAEL,uBAAGH,UAAU,oBAEf,uBAAGA,UAAU,eAAeG,KAAK,mCAC/B,uBAAGH,UAAU,mBAEf,uBACEA,UAAU,eACVG,KAAK,6CAEL,uBAAGH,UAAU,qBAEf,uBACEA,UAAU,eACVG,KAAK,+EAEL,uBAAGH,UAAU,oBAGjB,yBAAKA,UAAU,2BACb,4BAAQA,UAAU,mBAChB,uBAAGI,QAhDO,WAEfC,OAAOC,KACL,uGAAwG,YA8CnG,uBAAGN,UAAU,mBADf,oB,KCzCKO,MATf,WACI,OACI,yBAAKP,UAAU,kBACX,kBAAC,EAAD,QCAGQ,MAJf,WACE,OAAO,yBAAKR,UAAU,mBAAf,sBCaMS,MAXf,WAEI,OACE,yBAAKT,UAAU,kBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCCQU,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75a4ff5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_photo.840f5f81.png\";","import React from \"react\";\nimport ProfilePhoto from '../../img/profile_photo.png';\nimport '../../scss/profile/profile.scss';\n\nfunction ProfileComponent() {\n\n const showResume = ()=>{\n     debugger;\n     window.open(\n       \"file:///Users/rosharma/Personal/Rohit%20Website/rohit-website/src/components/profile/RohitSharma.pdf\", \"_blank\"\n     );\n     //window.open(__dirname+'RohitSharma.pdf' , \"_blank\");\n }\n\n  return (\n    <div className=\"profile-component\">\n      <div className=\"profile-photo\">\n        <img src={ProfilePhoto} className=\"profile-photo-img\" />\n      </div>\n      <div className=\"profile-name\">\n        <h2>Rohit Sharma</h2>\n        <h4>Web Developer</h4>\n      </div>\n      <div className=\"profile-social-links\">\n        <a\n          className=\"social-links\"\n          href=\"http://www.facebook.com/rohitsharma308\"\n        >\n          <i className=\"fa fa-facebook\"></i>\n        </a>\n        <a\n          className=\"social-links\"\n          href=\"https://www.linkedin.com/in/rohit-sharma-86161051/\"\n        >\n          <i className=\"fa fa-linkedin\"></i>\n        </a>\n        <a className=\"social-links\" href=\"https://twitter.com/rohitcsegec\">\n          <i className=\"fa fa-twitter\"></i>\n        </a>\n        <a\n          className=\"social-links\"\n          href=\"https://www.instagram.com/rohitsharma308/\"\n        >\n          <i className=\"fa fa-instagram\"></i>\n        </a>\n        <a\n          className=\"social-links\"\n          href=\"https://www.youtube.com/channel/UCvSYuZZWSOAQA_9XiMtGr2A?view_as=subscriber\"\n        >\n          <i className=\"fa fa-youtube\"></i>\n        </a>\n      </div>\n      <div className=\"profile-download-button\">\n        <button className=\"download-button\">\n          <a onClick={showResume}>\n            <i className=\"fa fa-download\"></i> Download CV\n          </a>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileComponent;\n","import React from 'react';\nimport Profile from './profile/profile';\nimport \"../scss/mainComponent.scss\";\n\nfunction LeftComponent(){\n    return(\n        <div className=\"left-component\">\n            <Profile></Profile>\n        </div>\n    )\n\n}\n\nexport default LeftComponent;","import React from \"react\";\nimport '../scss/mainComponent.scss';\n\nfunction RightComponent() {\n  return <div className=\"right-component\">WORK IN  PROGRESS</div>;\n}\n\nexport default RightComponent;\n","\nimport React from 'react';\nimport LeftContent from './leftComponent';\nimport RightContent from './rightComponent';\nimport '../scss/mainComponent.scss';\n\nfunction MainComponent() {\n\n    return (\n      <div className=\"main-component\">\n       <LeftContent></LeftContent>\n       <RightContent></RightContent>\n      </div>\n    );\n\n}\n\nexport default MainComponent;","import React from 'react';\nimport MainComponent from './components/mainComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent></MainComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}